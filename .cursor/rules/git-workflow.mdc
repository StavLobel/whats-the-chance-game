---
description: Git workflow and branch management guidelines
globs:
  - "**/*.{ts,tsx,js,jsx,py}"
  - "**/*.md"
alwaysApply: true
---

# Git Workflow Guidelines

## Branch Management

### Feature Branch Workflow
- **Create a new branch for each task**: `git checkout -b feature/task-name`
- **Branch naming convention**: `feature/issue-number-task-name` (e.g., `feature/4-testing-infrastructure`)
- **Never work directly on main branch**
- **Keep branches focused on single tasks**

### Branch Creation Process
1. **Start from main**: `git checkout main && git pull origin main`
2. **Create feature branch**: `git checkout -b feature/issue-number-task-name`
3. **Work on task**: Implement features following TDD approach
4. **Commit frequently**: Use descriptive commit messages
5. **Push branch**: `git push origin feature/issue-number-task-name`

## Merge Requirements

### Mandatory Pre-Merge Checklist
- [ ] **All tests pass** (unit, integration, E2E)
- [ ] **Test coverage maintained** (90%+ target)
- [ ] **Code follows project standards** (ESLint, Prettier)
- [ ] **Documentation updated** (README.md, API docs if needed)
- [ ] **GitHub issue updated** with implementation summary
- [ ] **TASKS.md updated** with completion status

### Merge Process
1. **Create Pull Request** from feature branch to main
2. **Run CI/CD pipeline** - all tests must pass
3. **Code review** - at least one approval required
4. **Merge only if tests pass** - no exceptions
5. **Delete feature branch** after successful merge

### Commit Message Standards
```
âœ… Complete [Task Name] - Closes #[issue-number]

- Brief description of what was implemented
- Any important technical notes
- Testing coverage achieved
- Breaking changes (if any)
```

## Quality Gates

### Automated Checks (CI/CD)
- **Unit tests**: Must pass 100%
- **Integration tests**: Must pass 100%
- **E2E tests**: Must pass 100%
- **Code coverage**: Minimum 90%
- **Linting**: No ESLint/Prettier errors
- **Type checking**: No TypeScript errors

### Manual Checks
- **Code review**: Peer review required
- **Documentation**: README.md and API docs updated
- **Issue tracking**: GitHub issue closed with summary
- **Task tracking**: TASKS.md updated

## Branch Protection Rules

### Main Branch Protection
- **Require pull request reviews**: At least 1 approval
- **Require status checks to pass**: All CI/CD checks
- **Require branches to be up to date**: Before merging
- **Restrict pushes**: No direct pushes to main
- **Require linear history**: No merge commits

### Feature Branch Guidelines
- **Keep branches short-lived**: Merge within 1-2 weeks
- **Regular updates**: Rebase on main frequently
- **Single responsibility**: One task per branch
- **Clear naming**: Descriptive branch names

## Emergency Procedures

### Hotfix Process
- **Create hotfix branch**: `git checkout -b hotfix/critical-issue`
- **Fix and test**: Follow same testing requirements
- **Fast-track merge**: Expedited review for critical fixes
- **Cherry-pick to main**: If needed for immediate deployment

### Rollback Process
- **Revert commit**: `git revert <commit-hash>`
- **Create rollback PR**: Document reason for rollback
- **Update issues**: Link rollback to related issues
- **Post-mortem**: Document lessons learned
