name: 🎭 End-to-End Tests

on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Specific E2E test to run (optional)'
        required: false
        type: choice
        options:
          - 'all'
          - 'auth'
          - 'game-flow'
          - 'friend-request'
          - 'friend-id-workflow'
          - 'friends-management'
          - 'ui-features'
          - 'error-handling'
          - 'performance'
          - 'health-check'
        default: 'all'
      browser:
        description: 'Browser to run tests on'
        required: false
        type: choice
        options:
          - 'all'
          - 'chromium'
          - 'firefox'
          - 'webkit'
        default: 'chromium'
  workflow_call:
    inputs:
      test_suite:
        required: false
        type: string
        default: 'all'
      browser:
        required: false
        type: string
        default: 'chromium'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  VITE_API_BASE_URL: 'http://localhost:8000'
  VITE_WEBSOCKET_URL: 'ws://localhost:8000/ws'
  # Docker environment variables
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  ALGORITHM: 'HS256'
  REDIS_URL: 'redis://redis:6379'
  REDIS_DB: '0'

jobs:
  # Setup full application stack with Docker
  setup-application:
    runs-on: ubuntu-latest
    name: '🚀 Setup Application Stack (Docker)'
    outputs:
      frontend-ready: ${{ steps.frontend-health.outputs.ready }}
      backend-ready: ${{ steps.backend-health.outputs.ready }}
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Create Docker network
        run: docker network create whats-the-chance-e2e || true

      - name: 🚀 Start Redis container
        run: |
          docker run -d \
            --name redis-e2e \
            --network whats-the-chance-e2e \
            -p 6379:6379 \
            redis:7-alpine \
            redis-server --appendonly yes --requirepass ""

      - name: 🔧 Create environment file for backend
        run: |
          cat > backend/.env << EOF
          ENVIRONMENT=test
          DEBUG=true
          API_HOST=0.0.0.0
          API_PORT=8000
          FIREBASE_PROJECT_ID=${{ env.FIREBASE_PROJECT_ID }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ALGORITHM=HS256
          REDIS_URL=redis://redis-e2e:6379
          REDIS_DB=0
          EOF

      - name: 📝 Write Firebase Service Account (ADC)
        env:
          SA_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          set -euo pipefail
          mkdir -p backend
          if [ -z "${SA_JSON:-}" ]; then
            echo "Missing FIREBASE_SERVICE_ACCOUNT_KEY secret" >&2
            exit 1
          fi
          # If it looks like JSON, write as-is; otherwise try to base64-decode first
          if printf '%s' "$SA_JSON" | head -c 1 | grep -q '{'; then
            printf '%s' "$SA_JSON" > backend/firebase-sa.json
          else
            echo "$SA_JSON" | base64 -d > backend/firebase-sa.json
          fi
          chmod 600 backend/firebase-sa.json

      - name: 🏗️ Build backend Docker image
        run: |
          docker build -t whats-the-chance-backend-e2e -f backend/Dockerfile.dev backend/

      - name: 🚀 Start backend container
        run: |
          docker run -d \
            --name backend-e2e \
            --network whats-the-chance-e2e \
            -p 8000:8000 \
            -v ${{ github.workspace }}/backend:/app \
            -e GOOGLE_APPLICATION_CREDENTIALS=/app/firebase-sa.json \
            --env-file backend/.env \
            --health-cmd "python -c 'import sys,urllib.request; u=\"http://localhost:8000/api/health\";\ntry:\n r=urllib.request.urlopen(u, timeout=2); sys.exit(0 if getattr(r, \"status\", 200)==200 else 1)\nexcept Exception:\n sys.exit(1)'" \
            --health-interval 2s \
            --health-timeout 2s \
            --health-retries 60 \
            whats-the-chance-backend-e2e

      - name: 🏗️ Build frontend Docker image
        run: |
          docker build -t whats-the-chance-frontend-e2e -f Dockerfile.frontend.dev .

      - name: 🚀 Start frontend container
        run: |
          docker run -d \
            --name frontend-e2e \
            --network whats-the-chance-e2e \
            -p 5173:5173 \
            -v ${{ github.workspace }}:/app \
            -w /app \
            -e VITE_API_BASE_URL=http://localhost:8000 \
            -e VITE_WEBSOCKET_URL=ws://localhost:8000/ws \
            --health-cmd "node -e \"require('http').get('http://localhost:5173', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\"" \
            --health-interval 2s \
            --health-timeout 2s \
            --health-retries 60 \
            whats-the-chance-frontend-e2e \
            sh -lc "npm ci && npx vite --host 0.0.0.0"

      - name: ⏳ Wait for Redis to be ready
        run: |
          for i in {1..30}; do
            if docker exec redis-e2e redis-cli ping | grep -q PONG; then
              echo "✅ Redis is ready"
              break
            fi
            echo "⏳ Waiting for Redis... ($i/30)"
            sleep 2
          done

      - name: ⏳ Wait for backend to be ready
        id: backend-health
        run: |
          for i in {1..120}; do
            status=$(docker inspect --format '{{json .State.Health.Status}}' backend-e2e 2>/dev/null | tr -d '"')
            if [ "$status" = "healthy" ]; then
              echo "ready=true" >> $GITHUB_OUTPUT
              echo "✅ Backend is healthy"
              break
            fi
            echo "⏳ Waiting for backend health... ($i/120) status=$status"
            sleep 1
          done

      - name: ⏳ Wait for frontend to be ready
        id: frontend-health
        run: |
          for i in {1..120}; do
            status=$(docker inspect --format '{{json .State.Health.Status}}' frontend-e2e 2>/dev/null | tr -d '"')
            if [ "$status" = "healthy" ]; then
              echo "ready=true" >> $GITHUB_OUTPUT
              echo "✅ Frontend is healthy"
              break
            fi
            echo "⏳ Waiting for frontend health... ($i/120) status=$status"
            sleep 1
          done

      - name: 📊 Show container status
        if: always()
        run: |
          echo "=== Container Status ==="
          docker ps -a --filter "name=e2e"
          echo "=== Backend Logs ==="
          docker logs backend-e2e --tail 20
          echo "=== Frontend Logs ==="
          docker logs frontend-e2e --tail 20

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install test dependencies
        run: |
          npm ci
          npx playwright install ${{ inputs.browser == 'all' && 'chromium firefox webkit' || inputs.browser }}

      - name: 🎭 Run E2E Tests (single-job)
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173
        run: |
          if [ "${{ inputs.test_suite }}" = "all" ]; then
            SPEC_GLOB="tests/e2e/**/*.spec.{ts,js}"
          else
            # Map input to a file if it exists, otherwise fallback to glob
            case "${{ inputs.test_suite }}" in
              auth) SPEC_GLOB="tests/e2e/auth.spec.ts" ;;
              game-flow) SPEC_GLOB="tests/e2e/game-flow.spec.ts" ;;
              friend-request) SPEC_GLOB="tests/e2e/friend-request-flow.spec.ts" ;;
              friend-id-workflow) SPEC_GLOB="tests/e2e/friend-id-workflow.spec.ts" ;;
              friends-management) SPEC_GLOB="tests/e2e/friends-flow.spec.ts" ;;
              ui-features) SPEC_GLOB="tests/e2e/ui-features.spec.ts" ;;
              error-handling) SPEC_GLOB="tests/e2e/error-handling.spec.ts" ;;
              performance) SPEC_GLOB="tests/e2e/performance.spec.ts" ;;
              health-check) SPEC_GLOB="tests/e2e/health-check.spec.ts" ;;
              *) SPEC_GLOB="tests/e2e/**/*.spec.{ts,js}" ;;
            esac
          fi
          echo "Running specs: $SPEC_GLOB"
          npx playwright test "$SPEC_GLOB" \
            --project=${{ inputs.browser == 'all' && 'chromium' || inputs.browser }} \
            --reporter=html,json \
            --output-dir=test-results/${{ inputs.test_suite }}-${{ inputs.browser }}

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-${{ inputs.test_suite }}-results-${{ inputs.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # E2E-01: Authentication Flow
  auth-flow-tests:
    if: false
    needs: setup-application
    runs-on: ubuntu-latest
    name: 'E2E-01: Authentication Flow'
    
    strategy:
      matrix:
        browser: ${{ inputs.browser == 'all' && fromJSON('["chromium", "firefox", "webkit"]') || fromJSON(format('["{0}"]', inputs.browser)) }}
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          npm ci
          npx playwright install ${{ matrix.browser }}

      - name: 🔍 Verify services are running
        run: |
          echo "Checking backend health..."
          curl -f http://localhost:8000/api/health || (echo "❌ Backend not ready" && exit 1)
          echo "Checking frontend availability..."
          curl -f http://localhost:5173 || (echo "❌ Frontend not ready" && exit 1)
          echo "✅ All services are ready for testing"

      - name: 🎭 Run Authentication E2E Tests
        run: |
          npx playwright test tests/e2e/auth.spec.ts \
            --project=${{ matrix.browser }} \
            --reporter=html \
            --reporter=json \
            --output-dir=test-results/auth-${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-auth-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 30

      - name: 📋 Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-auth-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

  # E2E-02: Complete Game Flow
  game-flow-tests:
    if: false
    needs: setup-application
    runs-on: ubuntu-latest
    name: 'E2E-02: Complete Game Flow'
    
    strategy:
      matrix:
        browser: ${{ inputs.browser == 'all' && fromJSON('["chromium", "firefox"]') || fromJSON(format('["{0}"]', inputs.browser)) }}
        test-case: ['challenge-creation', 'challenge-acceptance', 'challenge-resolution', 'full-flow']
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          npm ci
          npx playwright install ${{ matrix.browser }}

      - name: 🔍 Verify services are running
        run: |
          echo "Checking backend health..."
          curl -f http://localhost:8000/api/health || (echo "❌ Backend not ready" && exit 1)
          echo "Checking frontend availability..."
          curl -f http://localhost:5173 || (echo "❌ Frontend not ready" && exit 1)
          echo "✅ All services are ready for testing"

      - name: 🎭 Run Game Flow E2E Tests - ${{ matrix.test-case }}
        run: |
          npx playwright test tests/e2e/game-flow.spec.ts \
            --project=${{ matrix.browser }} \
            --grep="${{ matrix.test-case }}" \
            --reporter=html \
            --reporter=json \
            --output-dir=test-results/game-flow-${{ matrix.browser }}-${{ matrix.test-case }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-game-flow-results-${{ matrix.browser }}-${{ matrix.test-case }}
          path: test-results/
          retention-days: 30

      - name: 📋 Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-game-flow-report-${{ matrix.browser }}-${{ matrix.test-case }}
          path: playwright-report/
          retention-days: 30

  # E2E-03: Friend Request Flow
  friend-request-tests:
    if: false
    needs: setup-application
    runs-on: ubuntu-latest
    name: 'E2E-03: Friend Request Flow'
    
    strategy:
      matrix:
        browser: ${{ inputs.browser == 'all' && fromJSON('["chromium", "firefox"]') || fromJSON(format('["{0}"]', inputs.browser)) }}
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          npm ci
          npx playwright install ${{ matrix.browser }}

      - name: 🔍 Verify services are running
        run: |
          echo "Checking backend health..."
          curl -f http://localhost:8000/api/health || (echo "❌ Backend not ready" && exit 1)
          echo "Checking frontend availability..."
          curl -f http://localhost:5173 || (echo "❌ Frontend not ready" && exit 1)
          echo "✅ All services are ready for testing"

      - name: 🎭 Run Friend Request E2E Tests
        run: |
          npx playwright test tests/e2e/friend-request-flow.spec.ts \
            --project=${{ matrix.browser }} \
            --reporter=html \
            --reporter=json \
            --output-dir=test-results/friend-request-${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-friend-request-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 30

  # E2E-04 to E2E-09: Additional test suites (using Docker containers)
  additional-e2e-tests:
    if: false
    needs: setup-application
    runs-on: ubuntu-latest
    name: 'E2E-04-09: Additional Tests'
    
    strategy:
      matrix:
        browser: ${{ inputs.browser == 'all' && fromJSON('["chromium", "firefox"]') || fromJSON(format('["{0}"]', inputs.browser)) }}
        test-suite: 
          - { name: 'friend-id-workflow', file: 'friend-id-workflow.spec.ts' }
          - { name: 'friends-management', file: 'friends-flow.spec.ts' }
          - { name: 'ui-features', file: 'ui-features.spec.ts' }
          - { name: 'error-handling', file: 'error-handling.spec.ts' }
          - { name: 'performance', file: 'performance.spec.ts' }
          - { name: 'health-check', file: 'health-check.spec.ts' }
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          npm ci
          npx playwright install ${{ matrix.browser }}

      - name: 🔍 Verify services are running
        run: |
          echo "Checking backend health..."
          curl -f http://localhost:8000/api/health || (echo "❌ Backend not ready" && exit 1)
          echo "Checking frontend availability..."
          curl -f http://localhost:5173 || (echo "❌ Frontend not ready" && exit 1)
          echo "✅ All services are ready for testing"

      - name: 🎭 Run E2E Tests - ${{ matrix.test-suite.name }}
        if: ${{ inputs.test_suite == 'all' || inputs.test_suite == matrix.test-suite.name }}
        run: |
          npx playwright test tests/e2e/${{ matrix.test-suite.file }} \
            --project=${{ matrix.browser }} \
            --reporter=html \
            --reporter=json \
            --output-dir=test-results/${{ matrix.test-suite.name }}-${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-${{ matrix.test-suite.name }}-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 30

  # Summary Job
  e2e-tests-summary:
    if: always()
    needs: [setup-application]
    runs-on: ubuntu-latest
    name: '📊 E2E Tests Summary'
    
    steps:
      - name: 📊 Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: e2e-*-results-*
          path: test-results/
          merge-multiple: true

      - name: 📋 Download all Playwright reports
        uses: actions/download-artifact@v4
        with:
          pattern: e2e-*-report-*
          path: playwright-reports/
          merge-multiple: true

      - name: 📈 Generate E2E test summary
        run: |
          echo "## 🎭 End-to-End Tests Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Browser Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| E2E-01: Authentication Flow | ${{ needs.auth-flow-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | ${{ inputs.browser }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E-02: Complete Game Flow | ${{ needs.game-flow-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | ${{ inputs.browser }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E-03: Friend Request Flow | ${{ needs.friend-request-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | ${{ inputs.browser }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E-04-09: Additional Tests | ${{ needs.additional-e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | ${{ inputs.browser }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Browser Coverage**: Chromium, Firefox, WebKit" >> $GITHUB_STEP_SUMMARY
          echo "**Test Environment**: Full Stack (Frontend + Backend + Firebase)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Reports Available**: Playwright HTML Reports, Test Results JSON" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Mark as successful
        if: ${{ needs.auth-flow-tests.result == 'success' && needs.game-flow-tests.result == 'success' && needs.friend-request-tests.result == 'success' && needs.additional-e2e-tests.result == 'success' }}
        run: echo "🎉 All E2E tests passed!"

      - name: ❌ Mark as failed
        if: ${{ needs.auth-flow-tests.result == 'failure' || needs.game-flow-tests.result == 'failure' || needs.friend-request-tests.result == 'failure' || needs.additional-e2e-tests.result == 'failure' }}
        run: |
          echo "❌ Some E2E tests failed!"
          exit 1

  # Cleanup Docker containers
  cleanup-containers:
    if: always()
    needs: [setup-application]
    runs-on: ubuntu-latest
    name: '🧹 Cleanup Docker Containers'
    
    steps:
      - name: 🛑 Stop and remove containers
        run: |
          echo "Stopping and removing E2E containers..."
          docker stop frontend-e2e backend-e2e redis-e2e 2>/dev/null || true
          docker rm frontend-e2e backend-e2e redis-e2e 2>/dev/null || true
          docker network rm whats-the-chance-e2e 2>/dev/null || true
          echo "✅ Cleanup completed"

      - name: 📊 Show final container status
        run: |
          echo "=== Final Container Status ==="
          docker ps -a --filter "name=e2e" || echo "No E2E containers found"
