name: CI Pipeline

on:
  push:
    branches: ['**'] # Run on all branches
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Testing
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting with auto-fix
        run: |
          npm run lint:fix
          npm run format

      - name: Run type checking
        run: npm run type-check
        continue-on-error: true

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Upload frontend coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./coverage

  # Backend Testing
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Setup Firebase credentials
        run: |
          cd backend
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > firebase-service-account.json
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}

      - name: Auto-fix Python formatting and linting
        run: |
          cd backend
          python3 -m black .
          python3 -m isort .

      - name: Run Python linting (tolerant)
        run: |
          cd backend
          python3 -m flake8 . --max-line-length=88 --extend-ignore=E203,W503,F401,F841 --exclude=tests || echo "⚠️ Linting issues found but not blocking"

      - name: Run unit tests
        run: |
          cd backend
          python3 -m pytest tests/unit/ -v --tb=short

      - name: Run integration tests
        run: |
          cd backend
          python3 -m pytest tests/integration/ -v --tb=short || echo "⚠️ Integration tests had issues but not blocking"

      - name: Upload backend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: backend/reports

  # E2E Testing
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd backend && pip install -r requirements.txt

      - name: Setup Firebase credentials
        run: |
          cd backend
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > firebase-service-account.json
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Start backend server
        run: |
          cd backend
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          ENVIRONMENT: test

      - name: Run E2E tests
        run: npx playwright test
        continue-on-error: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            ./test-results/
            ./playwright-report/

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Generate and Deploy Allure Reports
  allure-report:
    name: Generate Allure Report
    runs-on: ubuntu-latest
    needs: [frontend, backend, e2e]
    if: always() && (needs.frontend.result == 'success' || needs.backend.result == 'success' || needs.e2e.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java for Allure
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Allure
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.24.1/allure-2.24.1.tgz
          tar -zxf allure-2.24.1.tgz
          sudo mv allure-2.24.1 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Download backend allure results
        uses: actions/download-artifact@v4
        with:
          name: backend-allure-results
          path: ./allure-results-backend
        continue-on-error: true

      - name: Download E2E allure results
        uses: actions/download-artifact@v4
        with:
          name: e2e-allure-results
          path: ./allure-results-e2e
        continue-on-error: true

      - name: Merge allure results
        run: |
          mkdir -p ./allure-results-merged
          if [ -d "./allure-results-backend" ]; then
            cp -r ./allure-results-backend/* ./allure-results-merged/ 2>/dev/null || true
          fi
          if [ -d "./allure-results-e2e" ]; then
            cp -r ./allure-results-e2e/* ./allure-results-merged/ 2>/dev/null || true
          fi

      - name: Generate Allure Report
        run: |
          if [ "$(ls -A ./allure-results-merged 2>/dev/null)" ]; then
            allure generate ./allure-results-merged --clean -o ./allure-report
            echo "Allure report generated successfully"
          else
            echo "No allure results found, creating empty report"
            mkdir -p ./allure-report
            echo "<h1>No test results available</h1>" > ./allure-report/index.html
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: allure-report

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

  # Auto-fix formatting issues
  format-fix:
    name: Auto-fix Formatting
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check for formatting issues
        id: check-format
        working-directory: ./backend
        run: |
          echo "🔍 Checking if formatting fixes are needed..."
          if black --check . || isort --check-only .; then
            echo "✅ No formatting issues found"
            echo "needs-fix=false" >> $GITHUB_OUTPUT
          else
            echo "🔧 Formatting issues found, will fix them"
            echo "needs-fix=true" >> $GITHUB_OUTPUT
          fi

      - name: Fix formatting issues
        if: steps.check-format.outputs.needs-fix == 'true'
        working-directory: ./backend
        run: |
          echo "🔧 Fixing code formatting with Black..."
          black .
          echo "🔧 Fixing import sorting with isort..."
          isort .
          echo "✅ Formatting fixes applied!"

      - name: Commit and push fixes
        if: steps.check-format.outputs.needs-fix == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "🔧 Auto-fix code formatting

          - Fix Black formatting issues
          - Fix isort import sorting

          Auto-generated by CI pipeline"
          git push
