name: CI Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Testing
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test

      - name: Run E2E tests
        run: |
          npx playwright install --with-deps
          npx playwright test
        continue-on-error: true

  # Backend Testing
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting
        working-directory: ./backend
        run: |
          echo "🔍 Checking code formatting with Black..."
          black --check --diff . || (echo "❌ Black found formatting issues. Run 'black .' locally to fix them." && exit 1)
          echo "✅ Black formatting check passed!"

          echo "🔍 Checking import sorting with isort..."
          isort --check-only --diff . || (echo "❌ isort found import sorting issues. Run 'isort .' locally to fix them." && exit 1)
          echo "✅ isort import sorting check passed!"

          echo "🔍 Running flake8 linting..."
          flake8 . || (echo "❌ flake8 found linting issues." && exit 1)
          echo "✅ flake8 linting passed!"

      - name: Run unit tests
        working-directory: ./backend
        run: |
          pytest tests/unit/ --cov=app --cov-report=term-missing

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Auto-fix formatting issues
  format-fix:
    name: Auto-fix Formatting
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check for formatting issues
        id: check-format
        working-directory: ./backend
        run: |
          echo "🔍 Checking if formatting fixes are needed..."
          if black --check . || isort --check-only .; then
            echo "✅ No formatting issues found"
            echo "needs-fix=false" >> $GITHUB_OUTPUT
          else
            echo "🔧 Formatting issues found, will fix them"
            echo "needs-fix=true" >> $GITHUB_OUTPUT
          fi

      - name: Fix formatting issues
        if: steps.check-format.outputs.needs-fix == 'true'
        working-directory: ./backend
        run: |
          echo "🔧 Fixing code formatting with Black..."
          black .
          echo "🔧 Fixing import sorting with isort..."
          isort .
          echo "✅ Formatting fixes applied!"

      - name: Commit and push fixes
        if: steps.check-format.outputs.needs-fix == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "🔧 Auto-fix code formatting

          - Fix Black formatting issues
          - Fix isort import sorting

          Auto-generated by CI pipeline"
          git push
