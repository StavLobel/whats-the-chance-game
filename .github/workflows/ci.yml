name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Run E2E tests with Playwright
        run: |
          npx playwright install --with-deps
          npx playwright test --reporter=allure-playwright
        continue-on-error: true

      - name: Generate Frontend Allure report
        if: always()
        run: |
          npx allure generate allure-results --clean -o frontend-allure-report

      - name: Upload Frontend Allure report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-allure-report
          path: frontend-allure-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: test-results/
          retention-days: 30

  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .[dev,test]

      - name: Run linting
        working-directory: ./backend
        run: |
          black --check .
          isort --check-only .
          flake8 .
          mypy .

      - name: Run unit tests with Allure
        working-directory: ./backend
        run: |
          pytest tests/unit/ --cov=app --cov-report=xml --cov-report=html --alluredir=allure-results
        continue-on-error: true

      - name: Run integration tests with Allure
        working-directory: ./backend
        run: |
          pytest tests/integration/ --alluredir=allure-results
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Generate Backend Allure report
        if: always()
        working-directory: ./backend
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Upload Backend Allure report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-allure-report
          path: backend/allure-report/
          retention-days: 30

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: backend/allure-report/
          retention-days: 30

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Deploy
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend.prod
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/whats-the-chance-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/whats-the-chance-frontend:${{ github.sha }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/whats-the-chance-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/whats-the-chance-backend:${{ github.sha }}

      - name: Deploy to production
        run: |
          echo "Deploying to production server..."
          # Add deployment script here

  # Deploy Allure Reports to GitHub Pages
  deploy-allure-reports:
    name: Deploy Allure Reports
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Frontend Allure report
        uses: actions/download-artifact@v4
        with:
          name: frontend-allure-report
          path: ./allure-reports/frontend/
        continue-on-error: true

      - name: Download Backend Allure report
        uses: actions/download-artifact@v4
        with:
          name: backend-allure-report
          path: ./allure-reports/backend/
        continue-on-error: true

      - name: Create index page
        run: |
          mkdir -p ./allure-reports
          cat > ./allure-reports/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Test Reports - What's the Chance Game</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .report-link { display: block; padding: 20px; margin: 10px 0; 
                                background: #f5f5f5; text-decoration: none; 
                                border-radius: 5px; color: #333; }
                  .report-link:hover { background: #e0e0e0; }
                  h1 { color: #2c3e50; }
                  .timestamp { color: #7f8c8d; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Test Reports - What's the Chance Game</h1>
                  <p class="timestamp">Generated: \$(date)</p>
                  <a href="./frontend/index.html" class="report-link">
                      <h3>Frontend Test Report (Playwright)</h3>
                      <p>End-to-end tests, component tests, and UI validation</p>
                  </a>
                  <a href="./backend/index.html" class="report-link">
                      <h3>Backend Test Report (Pytest)</h3>
                      <p>Unit tests, integration tests, and API testing</p>
                  </a>
              </div>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./allure-reports

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Generate changelog
        run: |
          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## What's Changed
            
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ## üöÄ New Features
            - Add new features here
            
            ## üêõ Bug Fixes
            - Fix bugs here
            
            ## üìö Documentation
            - Update documentation here
          draft: false
          prerelease: false 