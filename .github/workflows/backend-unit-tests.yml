name: üîß Backend Unit Tests

on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Specific test suite to run (optional)'
        required: false
        type: choice
        options:
          - 'all'
          - 'models'
          - 'validation'
          - 'friend-id-api'
          - 'firebase-service'
          - 'game-stats'
        default: 'all'
  workflow_call:
    inputs:
      test_suite:
        required: false
        type: string
        default: 'all'

env:
  PYTHON_VERSION: '3.11'
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_TEST_PROJECT_ID || 'whats-the-chance-test' }}
  ALGORITHM: 'HS256'
  ACCESS_TOKEN_EXPIRE_MINUTES: '30'
  REDIS_URL: 'redis://localhost:6379'
  REDIS_DB: '1'
  DEBUG: 'true'
  TESTING: 'true'
  FIREBASE_SERVICE_ACCOUNT_PATH: 'firebase-service-account.json'
  FIRESTORE_COLLECTION_PREFIX: 'test_'

jobs:
  # B-01: User Model Tests
  models-tests:
    if: ${{ inputs.test_suite == 'all' || inputs.test_suite == 'models' }}
    runs-on: ubuntu-latest
    name: 'B-01: User Models'
    
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì• Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-html allure-pytest

      - name: üß™ Run Model Tests
        working-directory: ./backend
        run: |
          pytest tests/unit/test_models.py \
            -v \
            --cov=app.models \
            --cov-report=html:coverage-html \
            --cov-report=json:coverage.json \
            --cov-report=term \
            --alluredir=allure-results \
            --html=reports/models-report.html \
            --self-contained-html
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ env.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ env.ACCESS_TOKEN_EXPIRE_MINUTES }}
          REDIS_URL: ${{ env.REDIS_URL }}
          REDIS_DB: ${{ env.REDIS_DB }}
          DEBUG: ${{ env.DEBUG }}
          TESTING: ${{ env.TESTING }}
          FIREBASE_SERVICE_ACCOUNT_PATH: ${{ env.FIREBASE_SERVICE_ACCOUNT_PATH }}
          FIRESTORE_COLLECTION_PREFIX: ${{ env.FIRESTORE_COLLECTION_PREFIX }}

      - name: üìä Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-models
          path: backend/coverage-html/
          retention-days: 30

      - name: üìã Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-reports-models
          path: backend/reports/
          retention-days: 30

      - name: üéØ Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-allure-models
          path: backend/allure-results/
          retention-days: 30

  # B-02: Challenge Validation Tests
  validation-tests:
    if: ${{ inputs.test_suite == 'all' || inputs.test_suite == 'validation' }}
    runs-on: ubuntu-latest
    name: 'B-02: Challenge Validation'
    
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì• Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-html allure-pytest

      - name: üß™ Run Validation Tests
        working-directory: ./backend
        run: |
          pytest tests/unit/test_challenge_validation.py \
            -v \
            --cov=app.schemas \
            --cov-report=html:coverage-html \
            --cov-report=json:coverage.json \
            --cov-report=term \
            --alluredir=allure-results \
            --html=reports/validation-report.html \
            --self-contained-html
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ env.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ env.ACCESS_TOKEN_EXPIRE_MINUTES }}
          REDIS_URL: ${{ env.REDIS_URL }}
          REDIS_DB: ${{ env.REDIS_DB }}
          DEBUG: ${{ env.DEBUG }}
          TESTING: ${{ env.TESTING }}
          FIREBASE_SERVICE_ACCOUNT_PATH: ${{ env.FIREBASE_SERVICE_ACCOUNT_PATH }}
          FIRESTORE_COLLECTION_PREFIX: ${{ env.FIRESTORE_COLLECTION_PREFIX }}

      - name: üìä Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-validation
          path: backend/coverage-html/
          retention-days: 30

      - name: üìã Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-reports-validation
          path: backend/reports/
          retention-days: 30

      - name: üéØ Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-allure-validation
          path: backend/allure-results/
          retention-days: 30

  # B-03: Friend ID API Tests
  friend-id-api-tests:
    if: ${{ inputs.test_suite == 'all' || inputs.test_suite == 'friend-id-api' }}
    runs-on: ubuntu-latest
    name: 'B-03: Friend ID API'
    
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì• Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-html allure-pytest

      - name: üîç Debug pytest-asyncio installation
        working-directory: ./backend
        run: |
          echo "=== Checking pytest-asyncio installation ==="
          pip list | grep pytest
          echo ""
          echo "=== Checking pytest plugins ==="
          pytest --collect-only --quiet 2>&1 | head -20
          echo ""
          echo "=== Checking pytest configuration ==="
          cat pytest.ini
          echo ""
          echo "=== Testing async support ==="
          python -c "import pytest_asyncio; print('pytest-asyncio version:', pytest_asyncio.__version__)"

      - name: üî• Setup Firebase Credentials
        working-directory: ./backend
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}" | base64 -d > firebase-service-account.json
          echo "‚úÖ Firebase credentials configured"

      - name: üß™ Test async functionality
        working-directory: ./backend
        run: |
          echo "=== Testing async test execution ==="
          python -c "
          import asyncio
          import pytest
          
          async def test_async():
              return 'async works'
          
          # Test if we can run async functions
          result = asyncio.run(test_async())
          print(f'Async test result: {result}')
          "

      - name: üß™ Run Friend ID API Tests
        working-directory: ./backend
        run: |
          pytest tests/unit/test_friend_id_api.py \
            -v \
            --cov=app.routers \
            --cov=app.services \
            --cov-report=html:coverage-html \
            --cov-report=json:coverage.json \
            --cov-report=term \
            --alluredir=allure-results \
            --html=reports/friend-id-api-report.html \
            --self-contained-html
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ env.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ env.ACCESS_TOKEN_EXPIRE_MINUTES }}
          REDIS_URL: ${{ env.REDIS_URL }}
          REDIS_DB: ${{ env.REDIS_DB }}
          DEBUG: ${{ env.DEBUG }}
          TESTING: ${{ env.TESTING }}
          FIREBASE_SERVICE_ACCOUNT_PATH: ${{ env.FIREBASE_SERVICE_ACCOUNT_PATH }}
          FIRESTORE_COLLECTION_PREFIX: ${{ env.FIRESTORE_COLLECTION_PREFIX }}

      - name: üìä Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-friend-id-api
          path: backend/coverage-html/
          retention-days: 30

      - name: üìã Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-reports-friend-id-api
          path: backend/reports/
          retention-days: 30

      - name: üéØ Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-allure-friend-id-api
          path: backend/allure-results/
          retention-days: 30

  # B-04: Firebase Service Tests
  firebase-service-tests:
    if: ${{ inputs.test_suite == 'all' || inputs.test_suite == 'firebase-service' }}
    runs-on: ubuntu-latest
    name: 'B-04: Firebase Service'
    
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì• Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-html allure-pytest

      - name: üî• Setup Firebase Credentials
        working-directory: ./backend
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}" | base64 -d > firebase-service-account.json
          echo "‚úÖ Firebase credentials configured"

      - name: üß™ Run Firebase Service Tests
        working-directory: ./backend
        run: |
          pytest tests/unit/test_firebase_service.py \
            -v \
            --cov=app.services.firebase_service \
            --cov-report=html:coverage-html \
            --cov-report=json:coverage.json \
            --cov-report=term \
            --alluredir=allure-results \
            --html=reports/firebase-service-report.html \
            --self-contained-html
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ env.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ env.ACCESS_TOKEN_EXPIRE_MINUTES }}
          REDIS_URL: ${{ env.REDIS_URL }}
          REDIS_DB: ${{ env.REDIS_DB }}
          DEBUG: ${{ env.DEBUG }}
          TESTING: ${{ env.TESTING }}
          FIREBASE_SERVICE_ACCOUNT_PATH: ${{ env.FIREBASE_SERVICE_ACCOUNT_PATH }}
          FIRESTORE_COLLECTION_PREFIX: ${{ env.FIRESTORE_COLLECTION_PREFIX }}

      - name: üìä Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-firebase-service
          path: backend/coverage-html/
          retention-days: 30

      - name: üìã Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-reports-firebase-service
          path: backend/reports/
          retention-days: 30

      - name: üéØ Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-allure-firebase-service
          path: backend/allure-results/
          retention-days: 30

  # B-05: Game Stats Tests
  game-stats-tests:
    if: ${{ inputs.test_suite == 'all' || inputs.test_suite == 'game-stats' }}
    runs-on: ubuntu-latest
    name: 'B-05: Game Stats'
    
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì• Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-html allure-pytest

      - name: üî• Setup Firebase Credentials
        working-directory: ./backend
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}" | base64 -d > firebase-service-account.json
          echo "‚úÖ Firebase credentials configured"

      - name: üß™ Run Game Stats Tests
        working-directory: ./backend
        run: |
          pytest tests/unit/test_game_stats.py \
            -v \
            --cov=app.routers.game_stats \
            --cov-report=html:coverage-html \
            --cov-report=json:coverage.json \
            --cov-report=term \
            --alluredir=allure-results \
            --html=reports/game-stats-report.html \
            --self-contained-html
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ env.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ env.ACCESS_TOKEN_EXPIRE_MINUTES }}
          REDIS_URL: ${{ env.REDIS_URL }}
          REDIS_DB: ${{ env.REDIS_DB }}
          DEBUG: ${{ env.DEBUG }}
          TESTING: ${{ env.TESTING }}
          FIREBASE_SERVICE_ACCOUNT_PATH: ${{ env.FIREBASE_SERVICE_ACCOUNT_PATH }}
          FIRESTORE_COLLECTION_PREFIX: ${{ env.FIRESTORE_COLLECTION_PREFIX }}

      - name: üìä Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-game-stats
          path: backend/coverage-html/
          retention-days: 30

      - name: üìã Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-reports-game-stats
          path: backend/reports/
          retention-days: 30

      - name: üéØ Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-allure-game-stats
          path: backend/allure-results/
          retention-days: 30

  # Summary Job
  backend-unit-tests-summary:
    if: always()
    needs: [models-tests, validation-tests, friend-id-api-tests, firebase-service-tests, game-stats-tests]
    runs-on: ubuntu-latest
    name: 'üìä Backend Unit Tests Summary'
    
    steps:
      - name: üìä Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: backend-coverage-*
          path: coverage-reports/
          merge-multiple: true

      - name: üìä Download all test reports
        uses: actions/download-artifact@v4
        with:
          pattern: backend-reports-*
          path: test-reports/
          merge-multiple: true

      - name: üéØ Download all Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: backend-allure-*
          path: allure-results/
          merge-multiple: true

      - name: üìà Generate combined coverage report
        run: |
          echo "## üîß Backend Unit Tests Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| B-01: User Models | ${{ needs.models-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| B-02: Challenge Validation | ${{ needs.validation-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| B-03: Friend ID API | ${{ needs.friend-id-api-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| B-04: Firebase Service | ${{ needs.firebase-service-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| B-05: Game Stats | ${{ needs.game-stats-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Coverage**: 90%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìã **Reports Available**: HTML, Allure, Coverage" >> $GITHUB_STEP_SUMMARY

      - name: ‚úÖ Mark as successful
        if: ${{ needs.models-tests.result == 'success' && needs.validation-tests.result == 'success' && needs.friend-id-api-tests.result == 'success' && needs.firebase-service-tests.result == 'success' && needs.game-stats-tests.result == 'success' }}
        run: echo "üéâ All backend unit tests passed!"

      - name: ‚ùå Mark as failed
        if: ${{ needs.models-tests.result == 'failure' || needs.validation-tests.result == 'failure' || needs.friend-id-api-tests.result == 'failure' || needs.firebase-service-tests.result == 'failure' || needs.game-stats-tests.result == 'failure' }}
        run: |
          echo "‚ùå Some backend unit tests failed!"
          exit 1
